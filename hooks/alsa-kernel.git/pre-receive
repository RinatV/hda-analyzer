#!/usr/bin/python

from sys import exit, stdin, stderr, stdout
from os import popen, mkdir, system, chdir, getcwd, remove
from os.path import isdir, exists
from shutil import rmtree
import re

TMP_PATH = '/dev/shm'

REPO_DIR = '/home/alsa-server/home/repositories'
KMIRROR_REPO = REPO_DIR + '/alsa-kmirror.git'
KERNEL_REPO = REPO_DIR + '/alsa-kernel.git'

VALID_COMMITERS = (
    'Jaroslav Kysela <perex@perex.cz>',
    'Takashi Iwai <tiwai@suse.de>',
    'Clemens Ladisch <clemens@ladisch.de>',
    'James Courtier-Dutton <James@superbug.demon.co.uk>',
    'Linus Torvalds <torvalds@linux-foundation.org>',
)

ALSA_FILES = (
    'Documentation/sound/alsa/',
    'sound/',
    'include/sound/'
)

NOT_ALSA_FILES = (
    'sound/sound_core.c',
    'sound/sound_firmware.c',
    'sound/oss/',
)

ALSA_FILES1 = {
    'Documentation/sound/alsa/':	'Documentation/',
    'sound/':				'',
    'include/sound/':			'include/'
}

ALSA_COMMITS = {}
ALSA_OK_COMMITS = []
ALSA_LAST_COMMIT = ''
UPSTREAM_COMMITS = []

def error(lines, msg, *args):
    for line in lines:
      stderr.write('===> %s' % line)
    stderr.write('PRE-RECEIVE ERROR: ' + msg % args)

def fail(): 
    if ALSA_LAST_COMMIT:
        stderr.write('PRE-RECEIVE: Reverting alsa-kmirror.git repo to original state\n')
        if system('git --git-dir=%s update-ref HEAD "refs/heads/master"' % KMIRROR_REPO):
            raise ValueError, "update-ref failed"
        if system('git --git-dir=%s reset -q --mixed %s > /dev/null' % (KMIRROR_REPO, ALSA_LAST_COMMIT)):
            raise ValueError, "reset failed"
    exit(1)

def is_alsa_file(file):
    for i in NOT_ALSA_FILES:
        if file.startswith(i):
            return False
    for i in ALSA_FILES:
        if file.startswith(i):
            return True
    return False

def to_alsa_file(gitfile, prefix=''):
    if gitfile == '/dev/null':
        return '/dev/null'
    if prefix and gitfile.startswith(prefix):
        gitfile = gitfile[len(prefix):]
    for i in ALSA_FILES1:
        if gitfile.startswith(i):
            return prefix + ALSA_FILES1[i] + gitfile[len(i):]
    raise ValueError, repr(gitfile)

def check_email(lines, fullemail, commit = False):
    #print 'E-mail: "%s"' % fullemail
    name, email = fullemail.split('<')
    name = name.strip()
    email = email.strip()
    if not email.endswith('>'):
        error(lines, 'E-mail address "%s" is not valid...\n' % (line))
        return False
    email = email[:-1]
    if email.find('@') <= 0 or len(name) < 5 or fullemail.find('root@') >= 0:
        error(lines, 'E-mail address "%s" is not valid...\n' % (line))
        return False
    if not commit:
        return True
    full = name + ' <' + email + '>'
    if not full in VALID_COMMITERS:
      error(lines, 'Commiter "%s" e-mail unknown. We know only these committers:\n' % full)
      for line in VALID_COMMITERS:
        stderr.write('***** %s\n' % line)
      return False
    return True

def read_kmirror_commits():
    global ALSA_LAST_COMMIT
    if ALSA_COMMITS:
        return
    stderr.write('PRE-RECEIVE: Analyzing alsa-kmirror commits\n')
    fp = popen("git --git-dir=%s log --pretty=fuller --date=iso" % KMIRROR_REPO)
    commitref = ''
    commit = {}
    while 1:
        line = fp.readline()
        if not line:
            break
        if line.startswith('commit '):
            if commitref:
                ALSA_COMMITS[commitref] = commit
                commit = {}
            commitref = line[7:].strip()
            if not ALSA_LAST_COMMIT:
                ALSA_LAST_COMMIT = commitref
        elif line.startswith('Author:') or line.startswith('AuthorDate:') or \
             line.startswith('Commit:') or line.startswith('CommitDate:'):
            a, b = line.split(': ')
            commit[a.strip()] = b.strip()
    if commitref:
        ALSA_COMMITS[commitref] = commit
    fp.close()

    worktree = TMP_PATH + '/alsa-repo'
    rmtree(worktree, ignore_errors=True)
    mkdir(worktree)
    if system("git --work-tree=%s --git-dir=%s checkout -q master kernel-sync" % (worktree, ALSA_REPO)):
        raise ValueError, 'git checkout'
    if exists(worktree + '/kernel-sync/git-ok-commits'):
        fp = open(worktree + '/kernel-sync/git-ok-commits')
        while 1:
            line = fp.readline()
            if not line:
                break
            if line.startswith('#'):
                continue
            ALSA_OK_COMMITS.append(line.strip())
    fp.close()
    rmtree(worktree, ignore_errors=True)

def check_alsa_commit(commit):
    subject = commit['comment'][0][:-1]
    if not ALSA_COMMITS:
        read_kmirror_commits()
    for c in ALSA_COMMITS:
        if ALSA_COMMITS[c]['AuthorDate'] == commit['AuthorDate'] and \
           ALSA_COMMITS[c]['Author'] == commit['Author'] and \
           ALSA_COMMITS[c]['CommitDate'] == commit['CommitDate'] and \
           ALSA_COMMITS[c]['Commit'] == commit['Commit']:
             stderr.write('PRE-RECEIVE: Already merged %s %s\n' % (commit['commit'][:7], subject))
             return True
    okstr = '"' + commit['Author'] + '" "' + commit['AuthorDate'] + '" "' + commit['Commit'] + '" "' + commit['CommitDate'] + '"'
    if okstr in ALSA_OK_COMMITS:
       stderr.write('PRE-RECEIVE: Already merged (manually) %s %s\n' % (commit['commit'][:7], subject))
       return True
    return False

def read_upstream_commits(old):
    stderr.write('PRE-RECEIVE: Analyzing alsa-kernel#linux-2.6 commits\n')
    head = popen("git rev-parse linux-2.6").readline().strip()
    stderr.write('PRE-RECEIVE: linux-2.6 head %s old %s\n' % (head, old))
    if head == old:
        return
    fp = popen("git log --pretty=oneline --date=iso %s..%s" % (old, head))
    while 1:
        line = fp.readline()
        if not line:
            break
        a = line.split(' ')
        UPSTREAM_COMMITS.append(a[0])
    del fp
    stderr.write('PRE-RECEIVE: linux-2.6 has %s new commits\n' % len(UPSTREAM_COMMITS))

def try_to_merge(commit):
    stderr.write('PRE-RECEIVE: Merging %s %s' % (commit['commit'][:7], commit['comment'][0]))

    ref = commit['commit']
    fp = popen("git diff %s~1..%s" % (ref, ref))
    rlines = []
    ok = False
    addfiles = []
    rmfiles = []
    while 1:
        line = fp.readline()
        if not line:
            break
        if line.startswith('diff --git a/'):
            file1, file2 = line[11:].split(' ')
            file1 = file1.strip()
            file2 = file2.strip()
            ok1 = is_alsa_file(file1[2:])
            ok2 = is_alsa_file(file2[2:])
            if ok1 or ok2:
                afile1 = to_alsa_file(file1, 'a/')
                afile2 = to_alsa_file(file2, 'b/')
                rlines.append('diff --git %s %s\n' % (afile1, afile2))
                if ok2:
                    addfiles.append(afile2[2:])
                elif ok1:
                    rmfiles.append(afile1[2:])
                ok = True
        elif ok and (line.startswith('--- a/') or line.startswith('+++ b/')):
            rlines.append(line[:6] + to_alsa_file(line[6:].strip()) + '\n')
        elif ok:
            rlines.append(line)
    fp.close()

    patchfile = TMP_PATH + '/alsa-kmirror-patch'
    fp = open(patchfile, 'w+')
    fp.write(''.join(rlines))
    fp.close()

    commentfile = TMP_PATH + '/alsa-kmirror-comment'
    fp = open(commentfile, 'w+')
    fp.write(''.join(commit['comment']))
    fp.close()

    elems = re.compile('(.*?)\s+<(.*)>').match(commit['Author'])
    exports = 'export GIT_AUTHOR_NAME="%s" ; ' % elems.group(1)
    exports += 'export GIT_AUTHOR_EMAIL="%s" ; ' % elems.group(2)
    exports += 'export GIT_AUTHOR_DATE="%s" ; ' % commit['AuthorDate']
    elems = re.compile('(.*?)\s+<(.*)>').match(commit['Commit'])
    exports += 'export GIT_COMMITER_NAME="%s" ; ' % elems.group(1)
    exports += 'export GIT_COMMITER_EMAIL="%s" ; ' % elems.group(2)
    exports += 'export GIT_COMMITER_DATE="%s" ; ' % commit['CommitDate']
    exports += 'export GIT_COMMITTER_NAME="%s" ; ' % elems.group(1)
    exports += 'export GIT_COMMITTER_EMAIL="%s" ; ' % elems.group(2)
    exports += 'export GIT_COMMITTER_DATE="%s" ; ' % commit['CommitDate']

    curdir = getcwd()
    worktree = TMP_PATH + '/alsa-kmirror-repo'
    rmtree(worktree, ignore_errors=True)
    mkdir(worktree)
    if system("git --work-tree=%s --git-dir=%s checkout -f -q master" % (worktree, KMIRROR_REPO)):
        raise ValueError, 'git checkout'
    chdir(worktree)
    if system("patch -p 1 --dry-run < %s" % patchfile):
        chdir(curdir)
        error(rlines, "Patch failed - is it already merged?\n")
        error([], "You may consider to add this commit to alsa.git/kernel-sync/git-ok-commits .\n")
        error([], "Please, check if patch was merged to alsa-kmirror.git at first!\n")
        error([], 'line: "%s" "%s" "%s" "%s"\n' % (commit['Author'], commit['AuthorDate'], commit['Commit'], commit['CommitDate']))
        fail()
    if system("git --work-tree=%s --git-dir=%s apply -v %s" % (worktree, KMIRROR_REPO, patchfile)):
        chdir(curdir)
        raise ValueError, 'git apply' 
    if addfiles and system("git --work-tree=%s --git-dir=%s add %s" % (worktree, KMIRROR_REPO, ' '.join(addfiles))):
        chdir(curdir)
        raise ValueError, 'git add' 
    if rmfiles and system("git --work-tree=%s --git-dir=%s rm %s" % (worktree, KMIRROR_REPO, ' '.join(rmfiles))):
        chdir(curdir)
        raise ValueError, 'git rm' 
    if system("%sgit --work-tree=%s --git-dir=%s commit -F %s" % (exports, worktree, KMIRROR_REPO, commentfile)):
        chdir(curdir)
        raise ValueError, 'git commit' 
    chdir(curdir)
    rmtree(worktree, ignore_errors=True)
    stderr.write('PRE-RECEIVE: Merge complete %s %s' % (ref[:7], commit['comment'][0]))

def do_check_commit(lines):
    alsafiles = 0
    otherfiles = 0
    header = True
    commit = {'comment':[], 'files':[]}
    for line in lines:
        if header:
            if line.startswith('commit '):
                commit['commit'] = line[7:].strip()
            elif line.startswith('Merge:') or line.startswith('Author:') or \
                 line.startswith('AuthorDate:') or line.startswith('Commit:') or \
                 line.startswith('CommitDate:'):
                a, b = line.split(': ')
                commit[a.strip()] = b.strip()
            elif line.startswith('    '):
                header = False
        if line.startswith('    '):
            commit['comment'].append(line[4:])
        elif not header and line != '\n':
            commit['files'].append(line[:-1])
            check = is_alsa_file(line[:-1])
            if check:
                alsafiles += 1
            else:
                otherfiles += 1
    while commit['comment'][-1] == '\n':
        del commit['comment'][-1]
    if not alsafiles:
        return
    if check_alsa_commit(commit):
        return
    try_to_merge(commit)
    if commit['commit'] in UPSTREAM_COMMITS:
        stderr.write('PRE-RECEIVE: Upstream patch %s %s\n' % (commit['commit'][:7], lines[6][4:]))
        return
    if otherfiles:
        stderr.write('PRE-RECEIVE: ALSA files %s other files %s\n' % (alsafiles, otherfiles))
        return
    if not check_email(lines, commit['Author']) or \
       not check_email(lines, commit['Commit']):
        fail()
    #if not check_email(lines, committer, commit=True):
    #    exit(1)
    if not lines[6][4:].upper().startswith('[ALSA] ') and \
       not lines[6][4:].upper().startswith('ALSA: '):
        error(lines, 'First log line does not start with "[ALSA] " or "ALSA: "\n')
        fail()
    lastsigned = ''
    for line in lines[6:]:
        if not line.startswith('    '):
            break
        line = line[4:-1]
        line1 = line.lower()
        if line1.startswith('signed-off-by:'):
            if not line.startswith('Signed-off-by:'):
                error(lines, 'Wrong Signed-off-by: line: "%s"\n' % line)
                fail()
            lastsigned = line[15:].strip()
    if not lastsigned:
        error(lines, 'Commit has no Signed-off-by: line\n')
        fail()
    if not lastsigned in VALID_COMMITERS:
        error(lines, 'Last Signed-off-by: line has an invalid ALSA committer\n')
        fail()
    
def do_check(sha1old, sha1new, refname):
    lines = popen("git log --reverse --name-only --pretty=fuller --date=iso %s..%s" % (sha1old, sha1new)).readlines()
    count = len(lines)
    idx = 1
    while idx < count:
        oldidx = idx - 1
        commit = []
        while idx < count and not lines[idx].startswith('commit '):
            idx += 1
        do_check_commit(lines[oldidx:idx])
        idx += 1

def compare_trees(lastref):
    stderr.write('PRE-RECEIVE: comparing alsa-kmirror (old) and alsa-kernel (new) repos\n')
    worktree = TMP_PATH + '/alsa-kmirror-repo'
    worktreek = TMP_PATH + '/alsa-kernel-repo'
    rmtree(worktree, ignore_errors=True)
    rmtree(worktreek, ignore_errors=True)
    mkdir(worktree)
    mkdir(worktreek)
    if system("git --work-tree=%s --git-dir=%s checkout -f -q master" % (worktree, KMIRROR_REPO)):
        raise ValueError, 'git checkout (kmirror)'
    if system("git --work-tree=%s --git-dir=%s checkout -q %s sound include/sound Documentation/sound/alsa" % (worktreek, KERNEL_REPO, lastref)):
        raise ValueError, 'git checkout (kernel)'
    curdir = getcwd()
    chdir(TMP_PATH)
    system("mv alsa-kernel-repo/sound/* alsa-kernel-repo")
    rmtree("alsa-kernel-repo/sound")
    system("mv alsa-kernel-repo/include/sound/* alsa-kernel-repo/include")
    rmtree("alsa-kernel-repo/include/sound")
    system("mv alsa-kernel-repo/Documentation/sound/alsa/* alsa-kernel-repo/Documentation")
    rmtree("alsa-kernel-repo/Documentation/sound")
    for i in ['.git-ok-commits', '.hgignore', '.hgtags', '.gitignore', 'kernel', 'scripts', 'oss']:
        if isdir("alsa-kmirror-repo/%s" % i):
            rmtree("alsa-kmirror-repo/%s" % i)
        elif exists("alsa-kmirror-repo/%s" % i):
            remove("alsa-kmirror-repo/%s" % i)
    for i in ['oss']:
        if isdir("alsa-kernel-repo/%s" % i):
            rmtree("alsa-kernel-repo/%s" % i)
        elif exists("alsa-kernel-repo/%s" % i):
            remove("alsa-kernel-repo/%s" % i)
    fp = popen("diff -ruNp alsa-kmirror-repo alsa-kernel-repo")
    notempty = False
    while 1:
        line = fp.readline()
        if not line:
            break
        stderr.write(line)
        notempty = True
    if notempty:
        stderr.write('\n')
    rmtree(worktree, ignore_errors=True)
    rmtree(worktreek, ignore_errors=True)
    if notempty:
        stderr.write('PRE-RECEIVE: repositories does not match, please, fix it\n')
        fail()

lines = stdin.readlines()
read_upstream_commits(lines[0][:-1].split(' ')[0])
lastref = ''
for line in lines:
    sha1old, sha1new, refname = line[:-1].split(' ')
    if refname in ['refs/heads/linux-2.6', 'refs/heads/for-linus']:
        continue
    elif refname.startswith('refs/tags/') or \
         refname.startswith('refs/heads/private-') or \
         refname.startswith('refs/heads/stable-2.6.'):
        continue
    elif refname != 'refs/heads/master':
        stderr.write('PRE-RECEIVE: invalid branch "%s"\n' % refname)
        fail()
    do_check(sha1old, sha1new, refname)
    lastref = sha1new
if lastref:
    compare_trees(lastref)
    stderr.write('PRE-RECEIVE: Trees match...\n')
stderr.write('PRE-RECEIVE: All done\n')
if 0:
    stderr.write('PRE-RECEIVE: Test mode active (try later)...\n')
    fail()
exit(0)
